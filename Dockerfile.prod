# Multi-stage Docker build for production deployment
# Stage 1: Build environment
FROM rust:1.75-slim as builder

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files
COPY Cargo.toml Cargo.lock ./

# Create dummy source to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release --bin dgdm-server
RUN rm -rf src

# Copy actual source code
COPY src ./src
COPY benches ./benches
COPY examples ./examples

# Build the application
RUN cargo build --release --bin dgdm-server

# Stage 2: Runtime environment
FROM debian:bookworm-slim as production

# Create non-root user
RUN groupadd -r dgdm && useradd -r -g dgdm -u 1001 dgdm

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the built binary
COPY --from=builder /app/target/release/dgdm-server ./dgdm-server

# Copy configuration files
COPY config.prod.toml ./config.toml
COPY models ./models

# Create directories
RUN mkdir -p logs && \
    chown -R dgdm:dgdm /app

# Switch to non-root user
USER dgdm

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Set environment variables
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1

# Run the application
ENTRYPOINT ["./dgdm-server"]
CMD ["--config", "config.toml"]