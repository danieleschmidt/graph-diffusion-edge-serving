version: '3.8'

services:
  # Generation 4 Quantum-Enhanced Graph Diffusion Server
  quantum-dgdm-server:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        BUILD_MODE: quantum-enhanced
        OPTIMIZATION_LEVEL: 4
    image: graph-diffusion-quantum:generation-4
    container_name: dgdm-quantum-server
    ports:
      - "8080:8080"
      - "8081:8081"  # Quantum optimization endpoint
      - "8082:8082"  # Self-modification endpoint
    environment:
      # Quantum Enhancement Configuration
      QUANTUM_OPTIMIZATION_ENABLED: "true"
      QUANTUM_COHERENCE_TIME: "100.0"
      QUANTUM_DECOHERENCE_RATE: "0.001"
      QUANTUM_LEARNING_RATE: "0.01"
      QUANTUM_MAX_ITERATIONS: "1000"
      
      # Evolutionary System Configuration
      EVOLUTIONARY_POPULATION_SIZE: "100"
      EVOLUTIONARY_MUTATION_RATE: "0.02"
      EVOLUTIONARY_CROSSOVER_RATE: "0.8"
      EVOLUTIONARY_ELITISM_RATE: "0.1"
      EVOLUTIONARY_GENERATIONS: "500"
      
      # Self-Modifying Code Configuration
      CODE_GENERATION_ENABLED: "true"
      SAFETY_VALIDATION_LEVEL: "strict"
      AUTO_ROLLBACK_ENABLED: "true"
      CODE_MODIFICATION_THRESHOLD: "0.8"
      
      # Advanced Performance Configuration
      RUST_LOG: "info,graph_diffusion_edge=debug,autonomous_quantum_engine=debug"
      TOKIO_WORKER_THREADS: "8"
      MAX_GRAPH_SIZE: "10000000"
      MAX_BATCH_SIZE: "1024"
      TPU_OPTIMIZATION_ENABLED: "true"
      
      # Multi-Objective Optimization
      PARETO_FRONT_SIZE: "50"
      HYPERVOLUME_THRESHOLD: "0.85"
      CONVERGENCE_THRESHOLD: "1e-6"
      
      # Monitoring & Observability
      PROMETHEUS_ENABLED: "true"
      JAEGER_ENABLED: "true"
      QUANTUM_METRICS_ENABLED: "true"
      
      # Security & Validation
      SECURITY_VALIDATION_ENABLED: "true"
      INPUT_SANITIZATION_LEVEL: "strict"
      AUDIT_LOGGING_ENABLED: "true"
      
    volumes:
      - ./config.quantum.toml:/app/config.toml:ro
      - ./models:/app/models:ro
      - quantum_cache:/app/cache
      - quantum_logs:/app/logs
      - quantum_checkpoints:/app/checkpoints
    networks:
      - quantum-network
    depends_on:
      - quantum-redis
      - quantum-prometheus
      - quantum-jaeger
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  # Quantum-Enhanced Redis Cache
  quantum-redis:
    image: redis:7-alpine
    container_name: quantum-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - quantum_redis_data:/data
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # Advanced Prometheus Monitoring
  quantum-prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.quantum.yml:/etc/prometheus/prometheus.yml:ro
      - quantum_prometheus_data:/prometheus
    networks:
      - quantum-network
    depends_on:
      - quantum-dgdm-server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  # Distributed Tracing with Jaeger
  quantum-jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quantum-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
      - "6831:6831/udp"  # Jaeger agent
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
    volumes:
      - quantum_jaeger_data:/tmp
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # Grafana Dashboard for Quantum Metrics
  quantum-grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: quantum_admin_2024
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
      GF_FEATURE_TOGGLES_ENABLE: "ngalert"
    volumes:
      - quantum_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - quantum-network
    depends_on:
      - quantum-prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped

  # Quantum Performance Load Balancer
  quantum-nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/quantum.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - quantum-network
    depends_on:
      - quantum-dgdm-server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped

  # Quantum Model Training Service (Optional)
  quantum-trainer:
    build:
      context: .
      dockerfile: Dockerfile.trainer
    image: quantum-model-trainer:latest
    container_name: quantum-trainer
    environment:
      TRAINING_MODE: "quantum_enhanced"
      EVOLUTIONARY_TRAINING_ENABLED: "true"
      QUANTUM_ALGORITHM_OPTIMIZATION: "true"
      MODEL_VERSIONING_ENABLED: "true"
    volumes:
      - ./training_data:/app/data:ro
      - ./models:/app/models
      - quantum_training_cache:/app/training_cache
    networks:
      - quantum-network
    depends_on:
      - quantum-redis
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    restart: "no"  # Training runs on-demand
    profiles:
      - training

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  quantum_cache:
    driver: local
  quantum_logs:
    driver: local
  quantum_checkpoints:
    driver: local
  quantum_redis_data:
    driver: local
  quantum_prometheus_data:
    driver: local
  quantum_jaeger_data:
    driver: local
  quantum_grafana_data:
    driver: local
  quantum_training_cache:
    driver: local